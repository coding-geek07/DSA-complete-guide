1.capitalizeFirst
Write a recursive function called capitalizeFirst. Given an array of strings, capitalize the first letter of each string in the array.
function capitalizeFirst (array) {
  if (array.length === 1) {
    return [array[0][0].toUpperCase() + array[0].substr(1)];
  }
  const res = capitalizeFirst(array.slice(0, -1));
  const string = array.slice(array.length - 1)[0][0].toUpperCase() + array.slice(array.length-1)[0].substr(1);
  res.push(string);
  return res;
}

2.nestedEvenSum
Write a recursive function called nestedEvenSum. Return the sum of all even numbers in an object which may contain nested objects.
function nestedEvenSum(obj, sum = 0) {
    for (const key in obj) {
        if (typeof obj[key] === 'object' && obj[key] !== null) {
            sum += nestedEvenSum(obj[key]);
        } else if (obj[key] % 2 == 0) {
            sum += obj[key];
        }
    }
    return sum;
}
var obj1 = {
    outer: 2,
    obj: {
        inner: 2,
        otherObj: {
            superInner: 2,
            notANumber: true,
            alsoNotANumber: "yup"
        }
    }
}
console.log(nestedEvenSum(obj1));

3.capitalizeWords
Write a recursive function called capitalizeWords. Given an array of words, return a new array containing each word capitalized
function capitalizeWords(strArr, newArr = []) {
    for (let i = 0; i < strArr.length; i++) {
        newArr = newArr.concat(strArr[i].toUpperCase());
    }
    return newArr;
}
console.log(capitalizeWords(['i', 'am', 'learning', 'recursion']));

4.stringifyNumbers
Write a function called stringifyNumbers which takes in an object and finds all of the values which are numbers and converts them to strings. Recursion would be a great way to solve this!
function stringifyNumbers(obj) {
    let newObj = {};
    function helperMethod(obj) {
        for (const key in obj) {
            if (typeof obj[key] === 'object' && !Array.isArray(obj[key]) && obj[key] !== null) {
                newObj[key] = stringifyNumbers(obj[key]);
            } else if (typeof obj[key] === 'number') {
                newObj[key] = String(obj[key]);
            } else {
                newObj[key] = obj[key];
            }
        }
        return newObj;
    }
    return helperMethod(obj);
}
let obj = {
    num: 1,
    test: [],
    data: {
        val: 4,
        info: {
            isRight: true,
            random: 66
        }
    }
};
console.log(stringifyNumbers(obj));

5.collectStrings
Write a function called collectStrings which accepts an object and returns an array of all the values in the object that have a typeof string

const obj = {
    stuff: "foo",
    data: {
        val: {
            thing: {
                info: "bar",
                moreInfo: {
                    evenMoreInfo: {
                        weMadeIt: "baz"
                    }
                }
            }
        }
    }
}
console.log(collectStrings(obj));