1. Write a factorial recursion

input : 4
output : 4 * 3 * 2* 1 : 24

function getFactorialOf(num) {
    if (num === 1) return 1;
    return num * getFactorialOf(num - 1);
}

console.log(getFactorialOf(4));

2.Collect Odd values from an Array 

input : [1,2,3,4,5]
output: [1,3,5]

//Pure recursion approach
function collectOddValues(arr){
    let newArr = [];
    
    if(arr.length === 0) {
        return newArr;
    }
        
    if(arr[0] % 2 !== 0){
        newArr.push(arr[0]);
    }
        
    newArr = newArr.concat(collectOddValues(arr.slice(1)));
    return newArr;
}

collectOddValues([1,2,3,4,5])

// Helper Method Approach
function collectOddValues(arr){
    
    let result = [];

    function helper(helperInput){
        if(helperInput.length === 0) {
            return;
        }
        
        if(helperInput[0] % 2 !== 0){
            result.push(helperInput[0])
        }
        
        helper(helperInput.slice(1))
    }
    
    helper(arr)

    return result;
}

collectOddValues([1,2,3,4,5,6,7,8,9])
                                        
3.power
Write a function called power which accepts a base and an exponent. The function should return the power of the base to the exponent. This function should mimic the functionality of Math.pow()  - do not worry about negative bases and exponents.

function power(base, exponent) {
    if (exponent === 0) return 1;
    return base * (power(base, exponent - 1));
}
console.log(power(2, 0));
/* 2 * power(2, 3)
    2 * power(2, 2)
        2 * power(2, 1)
            2 * power(2, 0) */

4.productOfArray
Write a function called productOfArray which takes in an array of numbers and returns the product of them all.
function productOfArray(arr) {
    if (!arr.length) return 1;
    return arr[0] * productOfArray(arr.slice(1));
}
console.log(productOfArray([1, 2, 3, 10]));     


5.recursiveRange
Write a function called recursiveRange which accepts a number and adds up all the numbers from 0 to the number passed to the function
function recursiveRange(num) {
    let sum = 0;
    function helperMethod(num) {
        if (num > 0) {
            sum = num + helperMethod(num - 1);
        }
        return sum;
    }
    return helperMethod(num);
}
console.log(recursiveRange(10));
Pure Recursion
function recursiveRange(x){
   if (x === 0 ) return 0;
   return x + recursiveRange(x-1);
}

6.fib
Write a recursive function called fib which accepts a number and returns the nth number in the Fibonacci sequence. Recall that the Fibonacci sequence is the sequence of whole numbers 1, 1, 2, 3, 5, 8, ... which starts with 1 and 1, and where every number thereafter is equal to the sum of the previous two numbers.

function fib(num) {
    if (num === 1 || num === 2) return 1;
    let arr = [1, 1];
    let i = 0, j = 1;
    function helperMethod(num) {
        if (arr.length < num) {
            arr.push(arr[i] + arr[j]);
            i++;
            j++;
            return helperMethod(num);
        }
        return arr[j];
    }
    return helperMethod(num);
}
console.log(fib(35));

Pure Recursion Approach
function fib(n){
    if (n <= 2) return 1;
    return fib(n-1) + fib(n-2);
}

7.reverse
Write a recursive function called reverse which accepts a string and returns a new string in reverse.
function reverse(str) {
    if (!str.length) return '';
    return str[str.length - 1] + reverse(str.slice(0, str.length - 1));
}

Refactored
function reverse(str){
	if(str.length <= 1) return str;
	return reverse(str.slice(1)) + str[0];
}
console.log(reverse('awesome'));

8.isPalindrome
Write a recursive function called isPalindrome which returns true if the string passed to it is a palindrome (reads the same forward and backward). Otherwise it returns false.
function isPalindrome(str) {
    if (str.length === 1 || str.length === 2) return true;
    if (str[0] === str.slice(-1)) return isPalindrome(str.slice(1, -1));
    return false;
}
console.log(isPalindrome('foobar'));
console.log(isPalindrome('tacocat'));